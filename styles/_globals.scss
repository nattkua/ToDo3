/*============================================================================================================================================================================================================================================
Globals Styles:
============================================================================================================================================================================================================================================*/

// --------------------------------------------------------------------------------------------------------------------
// Varibles
// --------------------------------------------------------------------------------------------------------------------

/* colors */
$white: #ffffff;
$dark: #111111;

$blue: #0074D9;
$green: #008957;
$pink: #dc00ad;
$purple: #B10DC9;

$red: #e91f00;
$background: $white;
$typeColor: $dark;
$highlight: $dark + 60;
$urgent: $red;
$sucess: $green;

$colors: ('blue':$blue,'green':$green,'pink':$pink,'purple':$purple);
/* end colors */

/* type */
// Inconsolata
//@import "https://fonts.googleapis.com/css?family=Inconsolata:400,700";
//$type: 'Inconsolata',Helvetica, Arial, sans-serif;
$type: Helvetica, Arial, sans-serif;
$copy: 400;
$headline: 700;
$lineWeight: 2px;
$scale: 1.3 !default;
/* end type */

/* grid setup */
$columnAmount: 12;
$gutterSize: 1em;
/* end grid setup */

/* border radius */
$borderCurve: .25rem;
/* end border radius */

/* animations */
// timing
$microTransition: .1s;
$macroTransition: .3s;
$delay: .15s;

//basic easing
$macroEase: cubic-bezier(0.2, 0, 0.2, 1);
$microEase: cubic-bezier(1.000, 0.000, 0.000, 1.000);
/* end animations */

/* z-index scale */
$z1:   100;
$z2:   200;
$z3:   300;
$z4:   400;
$z5:   500;
$z6:   600;
$z7:   700;
$z8:   800;
$z9:   900;
$z10: 1000;
/* end z-index scale */
// --------------------------------------------------------------------------------------------------------------------
// End Varibles
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// Functions
// --------------------------------------------------------------------------------------------------------------------
// modular scale function
// lists for iteration
$properties: margin padding;
$props: m p;
$directions: top right bottom left;
$dirs: t r b l;

// modular scale, borrowed from Bourbon
@function ms($increment) {
  $value: $gutterSize;
  $v1: nth($value, 1);
  $v2: nth($value, length($value));
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $scale); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $scale); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $scale) > $v2 {
        $value: $v2;
        $v2: ($v2 * $scale);
      } @else {
        $v1: ($v1 * $scale);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $scale);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $scale) < $v2 {
        $value: $v2;
        $v2: ($v2 / $scale);
      } @else {
        $v1: ($v1 / $scale);
        $value: $v1;
      }
    }
  }

  @return $value;
}
// --------------------------------------------------------------------------------------------------------------------
// End Functions
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// Mixins
// --------------------------------------------------------------------------------------------------------------------
// clearfix for floating children
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// grid
@mixin columnSize($span) {
  $singleWidth: 100 / $columnAmount;
  $columnWidth: $span * $singleWidth;

  padding: modular(-2) modular(-2);
  position: relative;
  width: #{$columnWidth}#{"%"};

  @if $columnWidth < 99 {
    float: left;
  }
}

// break point
@mixin breakPoint($point) {
  @if $point ==  xxl {
    @media (min-width: 100em) { @content; }
  }
  @else if $point == xl {
    @media (min-width: 75em) { @content; }
  }
  @else if $point == lg {
    @media (min-width: 60em) { @content; }
  }
  @else if $point == md {
    @media (min-width: 50em) { @content; }
  }
  @else if $point == sm {
    @media (min-width: 32em)  { @content; }
  }
  @else if $point == nm {
    @media (max-width: 50em) { @content}
  }
  @else {
   @content;
 }
}

// animation
// basic transition
@mixin transition($method...) {
  transition: $method;
  -webkit-transform: translate3d(0,0,0);
}

//basic stager delay
@mixin staggerTransition($i, $initial-delay, $stagger-delay) {
  @while $i > 0 {
    &:nth-of-type(#{$i}) {
      transition-delay: $initial-delay + $stagger-delay * $i;
    }
    $i: $i - 1;
  }
}

// input placeholder color
@mixin placeholderColor($color) {
  @each $prefix in -webkit-input-placeholder, -moz-placeholder, -ms-input-placeholder {
    &::#{$prefix} {
      color: $color;
    }
  }
}

// todo theme
@mixin todoTheme {
  @each $color, $i in $colors {
    &.#{$color} {
      //@include transition(transform $macroTransition $macroEase, opacity $macroTransition $macroEase);
      color: #{$i};

      .todo-info {
        border-color: #{$i};
      }

      .todo-primary-action {
        border-color: #{$i};

        @include breakPoint(sm) {
          border-color: #{$i};
        }
      }

      .button.button--primary {
        background-color: #{$i};

        &:hover,
        &:focus {
          background-color: #{$i + 60};
        }
      }

      .button.button--secondary {
        border-color: #{$i};
        color: #{$i};

        &:hover,
        &:focus {
          background-color: #{$i};
          color: $background;
        }
      }

    }
  }
}
// --------------------------------------------------------------------------------------------------------------------
// End Mixins
// --------------------------------------------------------------------------------------------------------------------
